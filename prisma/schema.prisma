// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  is_delete Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("roles")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  phone_no     String   @unique
  password     String
  role_id      Int?
  refreshToken String?
  is_delete    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role Role? @relation(fields: [role_id], references: [id], onDelete: SetNull)

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  category_id Int
  size        String
  description String
  net_weight  String
  kg          Float
  made_in     String
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer_invoice_items CustomerInvoiceItem[]
  supplier_invoice_items SupplierInvoiceItem[]

  category Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("products")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone_no  String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer_invoices CustomerInvoice[]

  @@map("customers")
}

model CustomerInvoice {
  id          Int      @id @default(autoincrement())
  customer_id Int
  date        DateTime
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer_invoice_items CustomerInvoiceItem[]

  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  @@map("customer_invoices")
}

model CustomerInvoiceItem {
  id                  Int      @id @default(autoincrement())
  customer_invoice_id Int
  product_id          Int?
  quantity            Int
  price               Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  customer_invoice CustomerInvoice @relation(fields: [customer_invoice_id], references: [id], onDelete: Cascade)
  product          Product?        @relation(fields: [product_id], references: [id], onDelete: SetNull)

  @@map("customer_invoice_items")
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  phone_no  String   @unique
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  supplier_invoices SupplierInvoice[]

  @@map("suppliers")
}

model SupplierInvoice {
  id          Int      @id @default(autoincrement())
  supplier_id Int
  date        DateTime
  total       Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  supplier_invoice_items SupplierInvoiceItem[]

  supplier Supplier @relation(fields: [supplier_id], references: [id], onDelete: Cascade)

  @@map("supplier_invoices")
}

model SupplierInvoiceItem {
  id                  Int      @id @default(autoincrement())
  supplier_invoice_id Int
  product_id          Int?
  quantity            Int
  price               Float
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  supplier_invoice SupplierInvoice @relation(fields: [supplier_invoice_id], references: [id], onDelete: Cascade)
  product          Product?        @relation(fields: [product_id], references: [id], onDelete: SetNull)

  @@map("supplier_invoice_items")
}
